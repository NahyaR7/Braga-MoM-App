// prisma/schema.prisma
// Ini adalah file "cetakan" data kita untuk Prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enum untuk role pengguna
enum UserRole {
  AM
  HEAD_OF_SALES
}

// Enum untuk status MoM
enum MoMStatus {
  COMPLETED
  PENDING
  ACTIVE
}

// Enum untuk status Action Item
enum ActionItemStatus {
  COMPLETED
  ACTIVE
}

// Cetakan untuk data Pengguna (User)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(AM)
  password      String?

  // Hubungan: Satu User bisa membuat banyak MoM dan Post
  createdMoMs   MoM[]
  posts         Post[] // Ini sudah benar, tidak perlu diubah.
  accounts      Account[]
  sessions      Session[]

  @@map("users") // Nama tabel di database
}

// Cetakan untuk data Post (TAMBAHAN PENTING)
model Post {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Hubungan: Satu Post dibuat oleh satu User
  createdById String
  createdBy   User    @relation(fields: [createdById], references: [id])

  @@map("posts")
}

// Cetakan untuk data MoM
model MoM {
  id              String       @id @default(cuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  clientName      String
  meetingDate     DateTime
  status          MoMStatus    @default(ACTIVE)

  // Menyimpan array string sebagai format JSON
  discussionPoints Json        @default("[]")
  decisions        Json        @default("[]")

  // Hubungan: MoM ini dibuat oleh satu User
  authorId        String
  author          User         @relation(fields: [authorId], references: [id])

  // Hubungan: Satu MoM bisa punya banyak Action Item
  actionItems     ActionItem[]

  @@map("moms")
}

// Cetakan untuk data Action Item
model ActionItem {
  id          String         @id @default(cuid())
  description String
  deadline    DateTime
  status      ActionItemStatus @default(ACTIVE)
  pic         String

  // Hubungan: Action Item ini milik satu MoM
  momId       String
  mom         MoM              @relation(fields: [momId], references: [id], onDelete: Cascade)

  @@map("action_items")
}

// --- Model bawaan dari NextAuth.js (Biarkan saja) ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}


// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//     provider = "prisma-client-js"
// }

// datasource db {
//     provider = "postgresql"
//     // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//     // Further reading:
//     // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//     // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//     url      = env("DATABASE_URL")
// }

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// // Necessary for Next auth
// model Account {
//     id                       String  @id @default(cuid())
//     userId                   String
//     type                     String
//     provider                 String
//     providerAccountId        String
//     refresh_token            String? // @db.Text
//     access_token             String? // @db.Text
//     expires_at               Int?
//     token_type               String?
//     scope                    String?
//     id_token                 String? // @db.Text
//     session_state            String?
//     user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//     refresh_token_expires_in Int?

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     posts         Post[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }


